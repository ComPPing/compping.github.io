<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://compping.github.io/blog</id>
    <title>ppingpong Blog</title>
    <updated>2023-09-27T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://compping.github.io/blog"/>
    <subtitle>ppingpong Blog</subtitle>
    <icon>https://compping.github.io/img/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[Next13 + cloudflare + PWA를 이용한 초기세팅]]></title>
        <id>https://compping.github.io/blog/nextjs-init</id>
        <link href="https://compping.github.io/blog/nextjs-init"/>
        <updated>2023-09-27T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[교내에서 열린 대회에 참여하여 AI를 이용한 서비스를 기획/개발중에 있다. 이번 포스팅에서는 프로젝트 초기 세팅(+PWA)과 더불어 cloudflare를 이용해 배포하기까지의 과정을 기록할 예정이다.]]></summary>
        <content type="html"><![CDATA[<p>교내에서 열린 대회에 참여하여 AI를 이용한 서비스를 기획/개발중에 있다. 이번 포스팅에서는 프로젝트 초기 세팅(+<code>PWA</code>)과 더불어 cloudflare를 이용해 배포하기까지의 과정을 기록할 예정이다.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="우선-next-부터-설치">우선 Next 부터 설치<a href="#우선-next-부터-설치" class="hash-link" aria-label="우선 Next 부터 설치에 대한 직접 링크" title="우선 Next 부터 설치에 대한 직접 링크">​</a></h3><p>사실 Next 공식문서에 너무 잘 나와있어서 굳~이 글로 쓸 필요는 없을것 같다. </p><p><a href="https://nextjs.org/docs/getting-started/installation" target="_blank" rel="noopener noreferrer">Getting Started: Installation</a></p><p>기본 세팅에서는 패키지 매니저가 <code>npm</code>으로 되어 있는데 나는 <code>package-lock.json</code>을 지우고 <code>pnpm</code>으로 설치해줬다. 물론 몇명이서 하는 프로젝트이다 보니 크기가 작아 스펙타클한 효능(?)을 못느끼겠지만 그래도 2~3초 정도 빠르다는 점에서 굳이 안바꿀 이유는 없었다. <code>yarn</code>은 업데이트가 안되고 있다고 해서 안쓰려고 하는 중이다.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="cloudflare에-배포">cloudflare에 배포<a href="#cloudflare에-배포" class="hash-link" aria-label="cloudflare에 배포에 대한 직접 링크" title="cloudflare에 배포에 대한 직접 링크">​</a></h3><p>나는 우선 배포부터 하고 보는 스타일이여서 이걸 두번째 단계로 넣었다.</p><p><strong>1. <code>next.config.js</code>에 있는 output 추가 (static site로 배포할 경우)</strong></p><div class="language-jsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsx codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> nextConfig </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token literal-property property" style="color:#36acaa">output</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'export'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>위처럼 코드를 수정한 후 pnpm build를 하면 아래 사진처럼 out 폴더에 정적 html이 생성됨을 확인할 수 있다.</p><p><img loading="lazy" alt="1" src="/assets/images/1-fabe9c2798d9c6f364cbb357a69e0aad.png" width="438" height="228" class="img_ev3q"></p><div class="theme-admonition theme-admonition-tip alert alert--success admonition_LlT9"><div class="admonitionHeading_tbUL"><span class="admonitionIcon_kALy"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>원래 예전에는 package.json에서 script도 변경해줬어야 했는데(next build &amp;&amp; next export) Next13에서는 변경된듯 하다.</div><div class="admonitionContent_S0QG"></div></div><p><img loading="lazy" alt="2" src="/assets/images/2-c1fa7da96b519e2aa7e10bd673729140.png" width="1326" height="452" class="img_ev3q"></p><p><strong>2. cloudflare 페이지로 이동</strong></p><p>회원가입 &amp; 로그인 후, Workers &amp; Pages 탭을 클릭</p><p><img loading="lazy" alt="3" src="/assets/images/3-f2b7ca12a187627c053dd00be3f75194.png" width="520" height="380" class="img_ev3q"></p><p><img loading="lazy" alt="4" src="/assets/images/4-b0be70e36eec3b75a27d9c19561a5c6c.png" width="2642" height="898" class="img_ev3q"></p><p>여기에 있는 Pages 탭에서 Connect to Git을 클릭</p><p><img loading="lazy" alt="5" src="/assets/images/5-20f4cd35638a08afd85d6531e02d53ff.png" width="2100" height="1382" class="img_ev3q"></p><p>github 연결 해주고 원하는 레포를 선택한다.</p><p><img loading="lazy" alt="6" src="/assets/images/6-ea5283201b7e85a2959d61169e30466a.png" width="946" height="622" class="img_ev3q"></p><p><img loading="lazy" alt="7" src="/assets/images/7-b807b5ad3bc6a6e576bfb559c7402a89.png" width="1286" height="820" class="img_ev3q"></p><p>위와 같이 정보를 입려해주면 끝! 아래와 같이 배포가 성공적으로 됐음을 확인할 수 있다.</p><p><img loading="lazy" alt="8" src="/assets/images/8-e3d048e691d5d65e3663de003307931e.png" width="1291" height="688" class="img_ev3q"></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="pwa-적용">PWA 적용<a href="#pwa-적용" class="hash-link" aria-label="PWA 적용에 대한 직접 링크" title="PWA 적용에 대한 직접 링크">​</a></h3><p>우리 서비스는 사용자의 위치를 알고있어야 하기 때문에 PWA 기술을 사용해야한다.  우선 <code>next-pwa</code>를 설치해준다.</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">pnpm</span><span class="token plain"> i next-pwa</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>그리고 next.config.js를 아래와 같이 수정한다.</p><div class="language-jsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsx codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> withPWA </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">require</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'next-pwa'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> nextConfig </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">withPWA</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token literal-property property" style="color:#36acaa">dest</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'public'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">module</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">exports</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> nextConfig</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>필요한 favicon, icon은 src/app 하위에 넣어주었다.</p><p><img loading="lazy" alt="9" src="/assets/images/9-70bc3bc2ee23697ce950db83c75a18c2.png" width="158" height="179" class="img_ev3q"></p><p>manifest.ts를 아래와 같이 작성해준다.</p><div class="language-jsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsx codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword module" style="color:#00009f">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:#393A34">{</span><span class="token imports"> </span><span class="token imports maybe-class-name">MetadataRoute</span><span class="token imports"> </span><span class="token imports punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword module" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'next'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword module" style="color:#00009f">export</span><span class="token plain"> </span><span class="token keyword module" style="color:#00009f">default</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">manifest</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token maybe-class-name">MetadataRoute</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access maybe-class-name">Manifest</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token literal-property property" style="color:#36acaa">name</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'ppingpong'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token literal-property property" style="color:#36acaa">short_name</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'ppingpong'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token literal-property property" style="color:#36acaa">description</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'ppingpong'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token literal-property property" style="color:#36acaa">start_url</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'/'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token literal-property property" style="color:#36acaa">display</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'standalone'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token literal-property property" style="color:#36acaa">background_color</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'#fff'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token literal-property property" style="color:#36acaa">theme_color</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'#FD8D32'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token literal-property property" style="color:#36acaa">icons</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token literal-property property" style="color:#36acaa">src</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'/icon.png'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token literal-property property" style="color:#36acaa">sizes</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'512x512'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token literal-property property" style="color:#36acaa">type</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'image/png'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token literal-property property" style="color:#36acaa">purpose</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"maskable"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token literal-property property" style="color:#36acaa">src</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'/apple-icon.png'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token literal-property property" style="color:#36acaa">sizes</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'512x512'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token literal-property property" style="color:#36acaa">type</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'image/png'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><code>gitignore</code>에 아래와 같은 코드를 추가해주었다.</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public/sw*</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">public/workbox-*</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>PWA가 제대로 설치되었다면 lighthouse 검사를 통해 아래와 같이 PWA에 초록색이 띄는걸 확인할 수 있다!</p><p><img loading="lazy" alt="10" src="/assets/images/10-7a6eb612e2e1725a2c72d50fdd16718e.png" width="785" height="175" class="img_ev3q"></p><p>또한 앱을 설치하면 위 사진처럼 크롬앱에서도 확인이 가능하다.</p><p><img loading="lazy" alt="11" src="/assets/images/11-735b26fa2bf8c35bafdb540c6d92d0b8.png" width="335" height="297" class="img_ev3q"></p><p><img loading="lazy" alt="앱으로 열었을 때 모습" src="/assets/images/12-429951222e132815536f663f28656aa2.png" width="2032" height="1167" class="img_ev3q"></p><p><em>앱으로 열었을 때 모습</em></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="참고자료">참고자료<a href="#참고자료" class="hash-link" aria-label="참고자료에 대한 직접 링크" title="참고자료에 대한 직접 링크">​</a></h3><p><a href="https://nextjs.org/docs/app/api-reference/file-conventions/metadata" target="_blank" rel="noopener noreferrer">Next.js 공식문서</a></p>]]></content>
        <author>
            <name>이하령</name>
            <uri>https://github.com/haryung-lee</uri>
        </author>
        <category label="frontend" term="frontend"/>
        <category label="nextjs" term="nextjs"/>
        <category label="pwa" term="pwa"/>
        <category label="cloudflare" term="cloudflare"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Conversational Recommender System Overall Processes]]></title>
        <id>https://compping.github.io/blog/conversational-recsys-overall-processes</id>
        <link href="https://compping.github.io/blog/conversational-recsys-overall-processes"/>
        <updated>2023-09-24T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[이 포스트에서는 대화형 추천 시스템 (conversational recommender system)을 구축하기 위한 전반적인 과정과, 유저의 utterance와 같은 텍스트 데이터를 어떻게 처리할 것인가에 대해 간략히 다룹니다.]]></summary>
        <content type="html"><![CDATA[<p>이 포스트에서는 대화형 추천 시스템 (conversational recommender system)을 구축하기 위한 전반적인 과정과, 유저의 utterance와 같은 텍스트 데이터를 어떻게 처리할 것인가에 대해 간략히 다룹니다.</p><p>유저의 utterance로부터 대화형 추천 시스템 구축은 자연어 처리 (natural language process), 추천 알고리즘, 유저 context에 대한 조합을 요구하는 복잡한 태스크입니다. 이를 step-by-step으로 알아봅시다:</p><ol><li><strong>Data Collection</strong>:<ul><li>이름, 위치, 타입 (e.g., bar, cafe, fine dining), 분위기 (e.g., quiet, lively), 음식 종류, 평점, 리뷰 등의 디테일한 정보를 포함하는 음식점 데이터셋을 모으는 걸로 시작합니다.</li><li>가능한, 유저의 선호도와 행동 데이터 (e.g., 이전에 방문한 음식점, 평점)를 모을 수 있으면 좋습니다.</li></ul></li><li><strong>Text Preprocessing</strong>:<ul><li>유저의 utterance을 처리하기 위해 NLP 기법을 사용합니다:<ul><li>Tokenization</li><li>Lowercasing</li><li>Removing stop words</li><li>Lemmatization or stemming</li></ul></li></ul></li><li><strong>Intent and Entity Recognition</strong>:<ul><li>utterance로부터 유저의 의도 (e.g., "find", "recommend", "search")를 추출합니다. 이때, intent recognition 모델을 사용합니다.</li><li>entity나 keyword (e.g., "quiet", "bar", "seafood")를 entity recognition이나 keyward extraction 기법을 사용해 추출합니다.</li></ul></li><li><strong>Contextual Understanding</strong>:<ul><li>시스템이 stateful하다면, 유저 context를 이해하기 위해 과거 상호작용들을 기억합니다. 이는 추천을 더 잘 정제할 수 있습니다. 예를 들어, 유저가 이전에 비건이라고 언급했다면, 고기집은 적절치 않은 추천입니다.</li><li>지역기반 서비스를 구축합니다. 유저가 특별히 다른 장소를 언급하지 않았다면, 유저 근처의 음식점 추천합니다.  </li></ul></li><li><strong>Candidate Generation</strong>:<ul><li>collaborative filtering이나 content-based filtering과 같은 전통적인 추천 알고리즘을 사용해 candidate list를 생성합니다.</li><li>추출된 entity를 바탕으로 이 리스트를 필터링합니다. 예를 들어, "quiet"와 "bar"가 entity라면, "quiet"한 attribute를 가진 bar만을 선택합니다.</li><li>유저의 행동 데이터가 있다면, 추천 리스트를 re-rank해 우선순위를 조정합니다. 예를 들어, 유저가 이탈리안 음식점을 자주 방문했다면, 이러한 음식점을 높은 우선순위에 둘 수 있습니다.</li></ul></li><li><strong>Hybrid Approach</strong>:<ul><li>추천 퀄리티를 높이기 위해 여러개의 추천 알고리즘을 결합할 수도 있습니다. 예를 들어, collaborative와 content-filtering을 결합하거나 딥러닝 기반 모델을 결합할 수 있습니다.</li></ul></li><li><strong>Feedback Loop</strong>:<ul><li>유저가 추천된 아이템들에 피드백을 제공하도록 합니다. explicit (e.g., ratings, likes)하거나 implicit (e.g., click-through rates, time spent)한 피드백들이 있습니다.</li><li>이러한 피드백을 사용해 지속적으로 추천 프로세스를 개선할 수 있습니다.</li></ul></li><li><strong>Post-Processing</strong>:<ul><li>유저에게 적절한 수의 추천 아이템을 제공합니다 (e.g., top 5 or top 10).</li><li>관련도, rating, 인기도와 같은 어떠한 metric을 사용해 추천된 아이템을 정렬합니다.</li></ul></li><li><strong>UI/UX Considerations</strong>:<ul><li>대화형 방식을 통해 context와 함께 추천 아이템을 제공합니다. 예를 들어, "근처 조용한 술집을 찾았어요:".</li><li>유저가 추천 시스템의 query를 조정하거나 추가 질문을 할 수 있게 합니다. 예를 들어, "이 중 실외석이 있는 곳이 있니?".</li></ul></li><li><strong>Evaluation and Continuous Learning</strong>:<ul><li>주기적으로 추천 시스템의 performance를 평가합니다. A/B testing과 같은 방법이 있습니다.</li><li>데이터와 피드백을 더 많이 수집하고, 추천 모델을 개선합니다.</li></ul></li></ol><p>이 중 텍스트 데이터를 처리하는 방법에 대해 집중적으로 다뤄보겠습니다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="how-to-extract-features-from-text-data">How to Extract Features from Text Data<a href="#how-to-extract-features-from-text-data" class="hash-link" aria-label="How to Extract Features from Text Data에 대한 직접 링크" title="How to Extract Features from Text Data에 대한 직접 링크">​</a></h2><p>유저의 utterance와 같은 텍스트 데이터로부터 추천 시스템에 사용할 feature를 추출할 때 크게 2가지 방법으로 처리할 수 있습니다: named entity recognition, keyword extraction. 두 방법은 비슷하면서도 다릅니다.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="named-entity-recognition">Named Entity Recognition<a href="#named-entity-recognition" class="hash-link" aria-label="Named Entity Recognition에 대한 직접 링크" title="Named Entity Recognition에 대한 직접 링크">​</a></h3><p>named entity recognition (NER)은 일종의 tagging 작업입니다. 어떤 텍스트로부터 <strong>entity를 사전에 정의된 카테고리로 분류</strong>하는 정보 추출 작업입니다. 카테고리 예시로 음식 타입, 분위기, 위치 등이 있습니다. NER 모델은 labeled data로부터 학습됩니다. 각 문장 내 단어는 상응하는 entity 타입으로 태그되어있습니다. entity는 유스케이스에 따라 다르게 정의됩니다. 아래 그림에서 entity로 'Name', 'Date', 'Designation', 'Subject"가 사전에 정의되어있는걸 확인할 수 있습니다.</p><p><img loading="lazy" src="/assets/images/named-entity-recognition-4bb3151e0e888cfe931292003690ca58.png" width="1920" height="650" class="img_ev3q"></p><p><strong>Usage in candidate generation:</strong></p><ul><li>음식점 추천 시스템 맥락에서, NER은 유저 uterrance로부터 특정 entity를 식별합니다. 예를 들어, "시카고 내 이탈리안 음식점을 원해"라는 문장에서, "이탈리안"은 '음식 타입', "시카고"는 '위치'로 인식됩니다.</li><li>candidate generation은 식별된 entity에 대응하는 음식점을 찾습니다.</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="keyword-extraction">Keyword Extraction<a href="#keyword-extraction" class="hash-link" aria-label="Keyword Extraction에 대한 직접 링크" title="Keyword Extraction에 대한 직접 링크">​</a></h3><p>keyward extraction은 거대한 텍스트 조각으로부터 관련된 용어를 식별 및 추출하는 작업입니다. 이는 entity가 사전에 정의되어있는가에 관계 없이 수행되며, 일종의 <strong>요약</strong>과 유사합니다.</p><p><strong>Usage in candidate generation:</strong></p><ul><li>"quiet", "rooftop", "seafood"와 같은 keyword를 유저의 utterance로부터 추출합니다.</li><li>이러한 keyword들은 음식점의 attribute, 태그, 리뷰 등과 매칭됩니다.</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="our-case">Our Case<a href="#our-case" class="hash-link" aria-label="Our Case에 대한 직접 링크" title="Our Case에 대한 직접 링크">​</a></h3><p>추천 시스템 구축에는 NER이 조금 더 적합하다고 판단됩니다. 그러나, NER은 labeled data로부터의 학습이 필요하기 때문에, 데이터셋을 별도로 구축하고 학습까지 해야하는 문제가 있습니다.</p><p>GPT는 자연어에 대해 충분히 이해하고 추론할 수 있는 능력을 가지고 있습니다. GPT를 활용한다면 NER 작업을 쉽게 할 수 있을 거라 판단됩니다:</p><ol><li>음식점에 대한 entity를 사전에 잘 정의.</li><li>GPT에게 entity를 추출해달라고 프롬프팅.</li><li>유저 utterance 또는 아이템 description 입력.</li><li>추출된 entity를 추천 모델에 입력.</li></ol><p>실제, 간이 테스트 결과 GPT-3.5, GPT-4 모두 훌륭한 결과를 내놓았습니다.</p>]]></content>
        <author>
            <name>박진영</name>
            <uri>https://github.com/DevSlem</uri>
        </author>
        <category label="recsys" term="recsys"/>
        <category label="nlp" term="nlp"/>
        <category label="ai" term="ai"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Recommdenr System RL Introduction]]></title>
        <id>https://compping.github.io/blog/recsys-rl-intro</id>
        <link href="https://compping.github.io/blog/recsys-rl-intro"/>
        <updated>2023-09-14T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[추천 시스템에 대해 더 자세히 이해하고 싶다면 아래 튜토리얼 코드를 참고하기 바랍니다.]]></summary>
        <content type="html"><![CDATA[<p>추천 시스템에 대해 더 자세히 이해하고 싶다면 아래 튜토리얼 코드를 참고하기 바랍니다.</p><blockquote><p>Tutorial Code: <a href="https://github.com/DevSlem/recommender-system-rl-tutorial" target="_blank" rel="noopener noreferrer">DevSlem/recommender-system-rl-tutorial (Github)</a></p></blockquote><p><strong>추천 시스템</strong> (recommender system)은 유저의 선호도 (preference)에 맞는 아이템을 제공하는 시스템입니다. 이는 유저-아이템 상호작용 히스토리를 고려해 이루어지는데, 추천 시스템이 유저에게 아이템을 제공하면 유저는 이에 대해 <strong>피드백</strong> (스킵, 클릭, 구매 등)을 제공합니다. 유튜브, 넷플릭스 등 수 많은 어플리케이션에서 이러한 추천 시스템을 도입하고 있습니다.</p><p><img loading="lazy" src="/assets/images/recsys-d473d6e4f27bdd6eda6df5bef2d65719.png" width="668" height="374" class="img_ev3q"></p><p>추천 시스템은 머신 러닝 (machine learning)을 통해 구축할 수 있습니다. 지도학습 (supervised learning)과 같은 기존 방법들은 대체적으로 <strong>유저와 추천 모델 사이의 상호작용을 무시</strong>해 불만족스러운 결과를 내놓습니다. 일반적으로, 추천 시스템은 인터렉티브한 프로세스로 <strong>연속적인 의사 결정 문제</strong> (sequential decision making problem)입니다. 따라서 <strong>강화학습</strong> (reinforcement learning)을 사용하여 최적화할 수 있습니다. 아래 그림은 지도학습과 강화학습 기반 방법 사이의 성능 비교 테이블입니다.</p><p><img loading="lazy" src="/assets/images/recsys-performance-table-a04cf8567c3d7ca13e8da3c6403217af.png" width="1572" height="392" class="img_ev3q"></p><p>이 포스트에서는 강화학습으로 추천 시스템을 구축하는 것에 대한 간단한 소개를 하려고 합니다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="recommdenr-system-process">Recommdenr System Process<a href="#recommdenr-system-process" class="hash-link" aria-label="Recommdenr System Process에 대한 직접 링크" title="Recommdenr System Process에 대한 직접 링크">​</a></h2><p>추천 시스템은 크게 두 과정으로 나뉩니다.</p><ol><li>candidate generation</li><li>ranking and recommendation</li></ol><p><img loading="lazy" src="/assets/images/recsys-process-3cdbcb35c9416067a3291e9592051b64.png" width="844" height="540" class="img_ev3q"></p><p>candidate generation은 수많은 아이템 중 일부분을 추출하는 과정입니다. 너무 많은 아이템을 모델에 입력하는 것은 비효율적이기 때문에 사전에 걸러내는 작업입니다. 이 때 후보 아이템 set을 <strong>document</strong>라고 부릅니다. ranking and recommendation은 document 아이템 중에서 실제 유저에게 추천할 아이템을 선택하는 과정입니다. 여기에 머신 러닝과 같은 기법이 사용됩니다. document로부터 선택된 아이템 set을 <strong>slate</strong>라고 부릅니다. </p><p><a href="https://github.com/google-research/recsim" target="_blank" rel="noopener noreferrer">Google RecSim</a>은 유저와의 연속적인 상호작용을 지원하는 추천 시스템에 대한 시뮬레이션 environment로, youtube 추천 알고리즘을 위해 개발되었습니다. 아래는 RecSim 아키텍쳐를 나타내는 그림으로 지금까지 설명한 내용을 한번에 보여주고 있습니다.</p><p><img loading="lazy" src="/assets/images/recsim-5dfba8e67865e1ed9962ac6af1123598.png" width="1032" height="686" class="img_ev3q"></p><p>자, 이제 toy 문제를 보고 왜 강화학습이 유용한지 알아봅시다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="problem-recommend-items-based-on-sweetness">Problem: Recommend Items based on Sweetness<a href="#problem-recommend-items-based-on-sweetness" class="hash-link" aria-label="Problem: Recommend Items based on Sweetness에 대한 직접 링크" title="Problem: Recommend Items based on Sweetness에 대한 직접 링크">​</a></h2><p>초콜릿과 케일 (채소)이 여러 개 있습니다. 우리는 초콜릿과 케일 중 어떤 것을 추천해야 유저가 만족할까를 고민하고 있습니다. 초콜릿은 단 맛이고, 케일은 쓴 맛이기 때문에 초콜릿과 케일을 달콤함 (sweetness)로 나타낼 수 있습니다. 여기서는 단순함을 위해 달콤함만 고려합시다. 유저들은 대체적으로 쓴 음식보다는 달콤한 음식을 선호할 것입니다. 우리가 생각해볼 수 있는 방법은 달콤한 음식만 추천하는 것입니다. 그러나 달콤한 음식만 추천하다보면 유저들은 점점 만족스러워하지 않을 것입니다. 왜냐하면 자신의 건강 역시 생각하기 떄문이죠. 따라서 유저들은 달콤한 음식보다는 건강에 좋은 달콤하지 않은 음식을 점점 더 선호하게 될 가능성이 있습니다. 그러나 대체적으로 달콤한 음식을 선호하는 유저들이 지속적으로 쓴 음식만 추천 받는다면 역시 불만족스럽겠죠. 이러한 요소들을 종합하면 우리의 가설은 다음과 같습니다: <strong>유저들은 대체적으로 달콤한 음식을 선호하지만, 시간이 지나면서 점점 달콤한 음식의 선호도가 내려가기 때문에 중간 중간 달콥하지 않은 음식도 추천 받길 원한다.</strong></p><p><img loading="lazy" src="/assets/images/user-choice-model-0a4b9ee6900e861beb837f4e049db2ab.png" width="1300" height="686" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="reinforcement-learning">Reinforcement Learning<a href="#reinforcement-learning" class="hash-link" aria-label="Reinforcement Learning에 대한 직접 링크" title="Reinforcement Learning에 대한 직접 링크">​</a></h2><p>위 문제를 강화학습으로 학습하기 위해 추천 시스템의 요소들을 잘 정의해야합니다. 추천 시스템의 궁극적인 목적은 유저의 engagement를 maximize하는 것입니다.</p><p>Objective: Maximize user's engagement.</p><p>여기서 engagment란 단어가 다소 모호할 수 있습니다. engagement란 추천된 아이템에 대한 상호작용이나 유저의 행동으로, <strong>유저의 흥미나 관심을 얼마나 효과적으로 끌고 있는지를 나타내는 측정값</strong>입니다. 예를 들면, 추천된 동영상을 시청한 시간 정도 입니다.</p><p>이제 다음을 정의해봅시다:</p><ul><li>Observation: sweetness of 20 items</li><li>Action: recommends 1 item</li><li>Reward: represents the engagement</li></ul><p>observation은 추천 모델이 관찰하는 정보입니다. 여기서는 단순함을 위해 유저 feature는 고려하지 않습니다. 그러나 유저 feature는 실제로 매우 중요합니다. 예를 들어 성별을 고려 시, 상대적으로 여성이 남성보다 달콤한 음식을 선호하므로 이는 추천 시 중요한 feature가 될 수 있습니다.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="baselines">Baselines<a href="#baselines" class="hash-link" aria-label="Baselines에 대한 직접 링크" title="Baselines에 대한 직접 링크">​</a></h3><p>먼저, baseline으로 가장 달콤한 아이템만 추천하는 sweetest policy와 랜덤하게 추천하는 random policy를 사용하겠습니다. 아래는 두 베이스라인의 시간에 따른 reward 변화입니다.</p><p><img loading="lazy" src="/assets/images/sweetest-policy-rewards-9fc49136d81b6928377b8cae72f1dd95.png" width="680" height="524" class="img_ev3q"></p><p><img loading="lazy" src="/assets/images/random-policy-rewards-11dcf84163ae10b2a5af0be616e7fec3.png" width="680" height="524" class="img_ev3q"></p><ul><li>sweetest policy cumulative reward: 56.93+/-1.44</li><li>random policy cumulative reward: 98.41+/-24.32</li></ul><p>유저들은 대체적으로 달콤한 음식을 선호하지만, 시간이 지나면서 점점 달콤한 음식의 선호도가 내려감을 알 수 있습니다. cumulative reward는 모든 time step동안 획득한 reward의 총합입니다.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="rl-performance">RL Performance<a href="#rl-performance" class="hash-link" aria-label="RL Performance에 대한 직접 링크" title="RL Performance에 대한 직접 링크">​</a></h3><p>multi-armed bandit (MAB)는 기존에 추천 시스템에 많이 사용되던 방법입니다. short-term RL은 즉각적인 reward만 고려하는 강화학습 방법으로, MAB와 유사한 속성을 지니고 있습니다. 따라서 short-term RL을 통해 MAB의 문제점을 확인할 수 있습니다.</p><p>반대로 long-term RL은 future reward도 고려해 학습하는 방법입니다. 연속적인 의사 결정 문제에서 future reward에 대한 고려는 매우 중요합니다. 현재 선택한 action이 future reward에 영향을 미치기 때문입니다.</p><p><img loading="lazy" src="/assets/images/rl-performance-454a8682cb3246560c5639444400f599.png" width="760" height="604" class="img_ev3q"></p><ul><li>short-term RL: discount factor = 0</li><li>long-term RL: discount factor = 0.99</li></ul><p>short-term RL은 학습 결과 sweetest policy와 유사해집니다. 이는 너무 당연한게, 유저들은 대체적으로 달콤한 음식을 선호하기 때문에 즉각적인 reward가 높기 때문입니다. long-term RL은 future reward도 고려하기 때문에 결과적으로 cumulative reward가 가장 높습니다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="references">References<a href="#references" class="hash-link" aria-label="References에 대한 직접 링크" title="References에 대한 직접 링크">​</a></h2><p>[1]<!-- --> Anyscale "<a href="https://github.com/anyscale/academy/tree/main/ray-rllib/acm_recsys_tutorial_2022" target="_blank" rel="noopener noreferrer">ACM RecSys 2022 Tutorial</a>"   (Github).<br>
<!-- -->[2]<!-- --> Ie, Eugene, et al. "<a href="https://arxiv.org/abs/1909.04847" target="_blank" rel="noopener noreferrer">Recsim: A configurable simulation platform for recommender systems.</a>  " arXiv preprint arXiv:1909.04847 (2019).<br>
<!-- -->[3]<!-- --> Lin, Yuanguo, et al. "<a href="https://ieeexplore.ieee.org/abstract/document/10144689?casa_token=bzipVczGG2wAAAAA:gkdWb-kk6v_bBlzY7Y3JLzwtsuWBrkw72iJE9Nm-r0uCB9ZDi_FCA-kwxbVTYlQjuOEi1BsW" target="_blank" rel="noopener noreferrer">A survey on reinforcement learning for recommender systems.</a>" IEEE Transactions on Neural Networks and Learning Systems (2023).<br>
<!-- -->[4]<!-- --> Sutton, Richard S., and Andrew G. Barto. Reinforcement learning: An introduction. MIT press, 2018.</p>]]></content>
        <author>
            <name>박진영</name>
            <uri>https://github.com/DevSlem</uri>
        </author>
        <category label="ai" term="ai"/>
        <category label="rl" term="rl"/>
        <category label="recsys" term="recsys"/>
    </entry>
</feed>